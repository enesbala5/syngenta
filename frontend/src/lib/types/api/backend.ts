/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/update-fields/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update Field */
        put: operations["update_field_update_fields__put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/fields/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Fields */
        get: operations["get_fields_fields__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/token": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Login */
        post: operations["login_token_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/protected": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Protected Route */
        get: operations["protected_route_protected_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get User */
        get: operations["get_user_user__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/widgets/{widget_type}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Widget
         * @description Retrieve a widget of the specified type.
         */
        get: operations["get_widget_widgets__widget_type__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/widgets/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Widgets
         * @description Retrieve a list of widgets, including weather data for the user's location.
         */
        get: operations["get_widgets_widgets__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** Change */
        Change: {
            /**
             * Unit
             * @description The unit of measurement for the change (e.g., kg, tons)
             */
            unit: string;
            /**
             * Amount
             * @description The amount of change
             */
            amount: number;
        };
        /** ChartContent */
        ChartContent: {
            /**
             * Title
             * @description The title of the chart widget
             */
            title: string;
            /**
             * Subtitle
             * @description The subtitle of the chart widget
             */
            subtitle: string;
            /**
             * Description
             * @description An optional description of the chart
             */
            description?: string | null;
            /**
             * Data
             * @description The json data from plotly.
             */
            data: string | null;
            /**
             * Prefix
             * @description A list of widgets to display before the image
             */
            prefix?: unknown[];
            /**
             * Suffix
             * @description A list of widgets to display before the image
             */
            suffix?: unknown[];
        };
        /** ChartWidgetModel */
        ChartWidgetModel: {
            /**
             * Type
             * @default chart
             * @constant
             */
            type: "chart";
            content: components["schemas"]["ChartContent"];
        };
        /** ExplanationContent */
        ExplanationContent: {
            /**
             * Title
             * @description The title of the explanation widget
             */
            title: string;
            /**
             * Subtitle
             * @description The subtitle of the explanation widget
             */
            subtitle: string;
            /**
             * Steps
             * @description A list of steps or instructions
             */
            steps: string[];
            /**
             * Prefix
             * @description A list of widgets to display before the image
             */
            prefix?: unknown[];
            /**
             * Suffix
             * @description A list of widgets to display before the image
             */
            suffix?: unknown[];
        };
        /** ExplanationWidgetModel */
        ExplanationWidgetModel: {
            /**
             * Type
             * @default explanation
             * @constant
             */
            type: "explanation";
            content: components["schemas"]["ExplanationContent"];
        };
        /** FieldModel */
        FieldModel: {
            /** Label */
            label: string;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            size: components["schemas"]["SizeModel"];
            /** Crop Id */
            crop_id: string;
            /** Owner Id */
            owner_id: string;
        };
        /** HTTPValidationError */
        HTTPValidationError: {
            /** Detail */
            detail?: components["schemas"]["ValidationError"][];
        };
        /** HarvestContent */
        HarvestContent: {
            /**
             * Title
             * @description The title of the harvest widget
             */
            title: string;
            /**
             * Subtitle
             * @description The subtitle of the harvest widget
             */
            subtitle: string;
            /**
             * Direction
             * @description The direction of change (increase, decrease, or neutral)
             * @enum {string}
             */
            direction: "increase" | "decrease" | "neutral";
            /** @description The change in harvest metrics */
            change: components["schemas"]["Change"];
            /** @description The progress of harvest metrics */
            progress: components["schemas"]["Progress"];
            /**
             * Prefix
             * @description A list of widgets to display before the image
             */
            prefix?: unknown[];
            /**
             * Suffix
             * @description A list of widgets to display before the image
             */
            suffix?: unknown[];
        };
        /** HarvestWidgetModel */
        HarvestWidgetModel: {
            /**
             * Type
             * @default harvest
             * @constant
             */
            type: "harvest";
            content: components["schemas"]["HarvestContent"];
        };
        /** ImageContent */
        ImageContent: {
            /**
             * Title
             * @description The title of the image widget
             */
            title: string;
            /**
             * Src
             * @description The source URL of the image
             */
            src: string;
            /**
             * Subtitle
             * @description The subtitle of the image widget
             */
            subtitle: string;
            /**
             * Description
             * @description An optional description of the image
             */
            description?: string | null;
            /**
             * Prefix
             * @description A list of widgets to display before the image
             */
            prefix?: unknown[];
            /**
             * Suffix
             * @description A list of widgets to display before the image
             */
            suffix?: unknown[];
        };
        /** ImageWidgetModel */
        ImageWidgetModel: {
            /**
             * Type
             * @default image
             * @constant
             */
            type: "image";
            content: components["schemas"]["ImageContent"];
        };
        /** LocationContent */
        LocationContent: {
            /**
             * Title
             * @description The title of the location widget
             */
            title: string;
            /**
             * Subtitle
             * @description The subtitle of the location widget
             */
            subtitle: string;
            /**
             * Description
             * @description An optional description of the location
             */
            description?: string | null;
            /**
             * Location
             * @description The coordinates of the location (latitude, longitude)
             */
            location: [
                number,
                number
            ];
            /**
             * Prefix
             * @description A list of widgets to display before the image
             */
            prefix?: unknown[];
            /**
             * Suffix
             * @description A list of widgets to display before the image
             */
            suffix?: unknown[];
        };
        /** LocationWidgetModel */
        LocationWidgetModel: {
            /**
             * Type
             * @default location
             * @constant
             */
            type: "location";
            content: components["schemas"]["LocationContent"];
        };
        /** LoginRequest */
        LoginRequest: {
            /** Phone Number */
            phone_number: string;
            /** Otp */
            otp: string;
        };
        /** Progress */
        Progress: {
            /**
             * Unit
             * @description The unit of measurement for the progress (e.g., kg, tons)
             */
            unit: string;
            /**
             * Amount
             * @description The amount of progress
             */
            amount: number;
        };
        /** RiskProfileContent */
        RiskProfileContent: {
            /**
             * Title
             * @description The title of the risk profile widget
             */
            title: string;
            /**
             * Description
             * @description The description of the risk profile widget
             */
            description: string;
            /** @description Optional scores for stress, yield, and nutrient */
            scores?: components["schemas"]["Scores"] | null;
            /**
             * Prefix
             * @description A list of widgets to display before the image
             */
            prefix?: unknown[];
            /**
             * Suffix
             * @description A list of widgets to display before the image
             */
            suffix?: unknown[];
        };
        /** RiskProfileWidgetModel */
        RiskProfileWidgetModel: {
            /**
             * Type
             * @default risk_profile
             * @constant
             */
            type: "risk_profile";
            content: components["schemas"]["RiskProfileContent"];
        };
        /** Scores */
        Scores: {
            /**
             * Stress
             * @description The stress score
             */
            stress?: number | null;
            /**
             * Yyield
             * @description The yield score
             */
            yyield?: number | null;
            /**
             * Nutrient
             * @description The nutrient score
             */
            nutrient?: number | null;
        };
        /** SizeModel */
        SizeModel: {
            /** Area */
            area: number;
        };
        /** Slide */
        Slide: {
            /**
             * Title
             * @description The title of the slide
             */
            title: string;
            /**
             * Content
             * @description The content of the slide
             */
            content: string;
            /**
             * Imageurl
             * @description An optional image URL for the slide
             */
            imageUrl?: string | null;
        };
        /** StoryContent */
        StoryContent: {
            /**
             * Title
             * @description The title of the story widget
             */
            title: string;
            /**
             * Subtitle
             * @description The subtitle of the story widget
             */
            subtitle: string;
            /**
             * Slides
             * @description A list of slides in the story
             */
            slides: components["schemas"]["Slide"][];
            /**
             * Prefix
             * @description A list of widgets to display before the image
             */
            prefix?: unknown[];
            /**
             * Suffix
             * @description A list of widgets to display before the image
             */
            suffix?: unknown[];
        };
        /** StoryWidgetModel */
        StoryWidgetModel: {
            /**
             * Type
             * @default story
             * @constant
             */
            type: "story";
            content: components["schemas"]["StoryContent"];
        };
        /** Token */
        Token: {
            /** Access Token */
            access_token: string;
            /** Token Type */
            token_type: string;
        };
        /** UserModel */
        UserModel: {
            /** Phone Number */
            phone_number: string;
            /** Name */
            name?: string | null;
            /** Lat */
            lat?: number | null;
            /** Lon */
            lon?: number | null;
            /** Token */
            token?: string | null;
        };
        /** ValidationError */
        ValidationError: {
            /** Location */
            loc: (string | number)[];
            /** Message */
            msg: string;
            /** Error Type */
            type: string;
        };
        /** VideoContent */
        VideoContent: {
            /**
             * Title
             * @description The title of the video widget
             */
            title: string;
            /**
             * Subtitle
             * @description The subtitle of the video widget
             */
            subtitle: string;
            /**
             * Description
             * @description An optional description of the video
             */
            description?: string | null;
            /**
             * Videourl
             * @description The URL of the video
             */
            videoUrl: string;
            /**
             * Autoplay
             * @description Whether the video should autoplay
             * @default false
             */
            autoplay: boolean;
            /**
             * Muted
             * @description Whether the video should be muted
             * @default false
             */
            muted: boolean;
            /**
             * Loop
             * @description Whether the video should loop
             * @default false
             */
            loop: boolean;
            /**
             * Controls
             * @description Whether the video controls should be displayed
             * @default true
             */
            controls: boolean;
            /**
             * Prefix
             * @description A list of widgets to display before the image
             */
            prefix?: unknown[];
            /**
             * Suffix
             * @description A list of widgets to display before the image
             */
            suffix?: unknown[];
        };
        /** VideoWidgetModel */
        VideoWidgetModel: {
            /**
             * Type
             * @default video
             * @constant
             */
            type: "video";
            content: components["schemas"]["VideoContent"];
        };
        /** WeatherContent */
        WeatherContent: {
            /**
             * Title
             * @description The title of the weather widget
             */
            title: string;
            /**
             * Subtitle
             * @description The subtitle of the weather widget
             */
            subtitle: string;
            /**
             * Description
             * @description A description of the weather widget
             */
            description: string | null;
            /**
             * Location
             * @description The location for the weather data
             */
            location?: string | null;
            /**
             * Temperature
             * @description The temperature in degrees Celsius
             */
            temperature?: number | null;
            /**
             * Condition
             * @description The weather icon.
             */
            condition?: string | null;
            /**
             * Humidity
             * @description The humidity percentage
             */
            humidity?: number | null;
            /**
             * Wind Speed
             * @description The wind speed in km/h
             */
            wind_speed?: number | null;
        };
        /** WeatherWidgetModel */
        WeatherWidgetModel: {
            /**
             * Type
             * @default weather
             * @constant
             */
            type: "weather";
            content: components["schemas"]["WeatherContent"];
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    update_field_update_fields__put: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["FieldModel"][];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_fields_fields__get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FieldModel"][];
                };
            };
        };
    };
    login_token_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LoginRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Token"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    protected_route_protected_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    get_user_user__get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserModel"];
                };
            };
        };
    };
    get_widget_widgets__widget_type__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                widget_type: "weather" | "image" | "video" | "location" | "explanation" | "story" | "risk_profile" | "harvest";
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WeatherWidgetModel"] | components["schemas"]["ImageWidgetModel"] | components["schemas"]["VideoWidgetModel"] | components["schemas"]["LocationWidgetModel"] | components["schemas"]["ExplanationWidgetModel"] | components["schemas"]["StoryWidgetModel"] | components["schemas"]["RiskProfileWidgetModel"] | components["schemas"]["HarvestWidgetModel"] | components["schemas"]["ChartWidgetModel"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_widgets_widgets__get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WeatherWidgetModel"] | components["schemas"]["ImageWidgetModel"] | components["schemas"]["VideoWidgetModel"] | components["schemas"]["LocationWidgetModel"] | components["schemas"]["ExplanationWidgetModel"] | components["schemas"]["StoryWidgetModel"] | components["schemas"]["RiskProfileWidgetModel"] | components["schemas"]["HarvestWidgetModel"] | components["schemas"]["ChartWidgetModel"];
                };
            };
        };
    };
}
